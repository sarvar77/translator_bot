import telebot
from telebot import types
from translate import Translator
from config import TOKEN

bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=["start"])
def start_command(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    ru_en = types.InlineKeyboardButton("üá∑üá∫ RU-EN üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø", callback_data="ru-en")
    en_ru = types.InlineKeyboardButton("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø EN-RU üá∑üá∫", callback_data="en-ru")
    uz_ru = types.InlineKeyboardButton("üá∫üáø UZ-RU üá∑üá∫", callback_data="uz-ru")
    ru_uz = types.InlineKeyboardButton("üá∑üá∫ RU-UZ üá∫üáø", callback_data="ru-uz")
    uz_en = types.InlineKeyboardButton("üá∫üáø UZ-EN üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø", callback_data="uz-en")
    en_uz = types.InlineKeyboardButton("üè¥Û†ÅßÛ†Å¢Û†Å•Û†ÅÆÛ†ÅßÛ†Åø EN-UZ üá∫üáø", callback_data="en-uz")

    markup.add(ru_en)
    markup.add(en_ru, uz_ru)
    markup.add(ru_uz, uz_en, en_uz)

    name = message.from_user.first_name
    global first
    first = bot.send_message(message.chat.id, f"<b>‚úã –ü—Ä–∏–≤–µ—Ç, {name}\n\n"
                                              f"üëá –Ø –º–æ–≥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —è–∑—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ—è—Ç –≤–Ω–∏–∑—É.\n\n–ñ–º–∏—Ç–µ –Ω–∞ –≤–∞–º –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É.</b>",
                             reply_markup=markup, parse_mode="html")


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    # ru-en
    def translator_1(message):
        user_text = message.text
        translated = translator.translate(user_text)
        bot.send_message(call.message.chat.id, f"<b>–í–∞—à —Ç–µ–∫—Å—Ç:</b> {user_text}\n\n"
                                               f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}", parse_mode="html")

    if call.data == "ru-en":
        translator = Translator(from_lang="ru", to_lang="en")
        bot.register_next_step_handler(first, translator_1)
        needed_text = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ (RU-EN)</b>",
                                       parse_mode="html")
#_______________________________________________________________________________________________________________________________

    def translator_2(message):
        user_text = message.text
        translated = translator.translate(user_text)
        bot.send_message(message.chat.id, f"<b>–í–∞—à —Ç–µ–∫—Å—Ç:</b> {user_text}\n\n"
                                          f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}", parse_mode="html")
    if call.data == "en-ru":
        translator = Translator(from_lang="en", to_lang="ru")
        bot.register_next_step_handler(first, translator_2)
        needed_text = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ (EN-RU)</b>",
                                       parse_mode="html")
#_______________________________________________________________________________________________________________________________

    def translator_3(message):
        user_text = message.text
        translated = translator.translate(user_text)
        bot.send_message(message.chat.id, f"<b>–í–∞—à —Ç–µ–∫—Å—Ç:</b> {user_text}\n\n"
                                          f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}", parse_mode="html")

    if call.data == "uz-ru":
        translator = Translator(from_lang="uz", to_lang="ru")
        bot.register_next_step_handler(first, translator_3)
        needed_text = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ (UZ-RU)</b>",
                                       parse_mode="html")
#_______________________________________________________________________________________________________________________________

    def translator_4(message):
        user_text = message.text
        translated = translator.translate(user_text)
        bot.send_message(message.chat.id, f"<b>–í–∞—à —Ç–µ–∫—Å—Ç:</b> {user_text}\n\n"
                                          f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}", parse_mode="html")

    if call.data == "ru-uz":
        translator = Translator(from_lang="ru", to_lang="uz")
        bot.register_next_step_handler(first, translator_4)
        needed_text = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ (RU-UZ)</b>",
                                       parse_mode="html")
#_______________________________________________________________________________________________________________________________

    def translator_5(message):
        user_text = message.text
        translated = translator.translate(user_text)
        bot.send_message(message.chat.id, f"<b>–í–∞—à —Ç–µ–∫—Å—Ç:</b> {user_text}\n\n"
                                          f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}", parse_mode="html")

    if call.data == "uz-en":
        translator = Translator(from_lang="uz", to_lang="en")
        bot.register_next_step_handler(first, translator_5)
        needed_text = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ (UZ-EN)</b>",
                                       parse_mode="html")
#_______________________________________________________________________________________________________________________________

    def translator_6(message):
        user_text = message.text
        translated = translator.translate(user_text)
        bot.send_message(message.chat.id, f"<b>–í–∞—à —Ç–µ–∫—Å—Ç:</b> {user_text}\n\n"
                                          f"<b>–ü–µ—Ä–µ–≤–æ–¥:</b> {translated}", parse_mode="html")

    if call.data == "en-uz":
        translator = Translator(from_lang="en", to_lang="uz")
        bot.register_next_step_handler(first, translator_6)
        needed_text = bot.send_message(call.message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ (EN-UZ)</b>",
                                       parse_mode="html")


bot.polling(none_stop=True)

# https://t.me/sarrvarr23
